/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import useSwr from 'swr'
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr'
import useSWRMutation from 'swr/mutation'
import type {
  SWRMutationConfiguration
} from 'swr/mutation'
import type {
  GetAllQuizQuizzesGetParams,
  HTTPValidationError,
  QuizCreate,
  QuizPublic,
  QuizQuestions,
  QuizQuestionsCreate,
  QuizzesPublic
} from '.././model'


  
  /**
 * @summary Get All Quiz
 */
export const getAllQuizQuizzesGet = (
    params?: GetAllQuizQuizzesGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<QuizzesPublic>> => {
    return axios.default.get(
      `/quizzes`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetAllQuizQuizzesGetKey = (params?: GetAllQuizQuizzesGetParams,) => [`/quizzes`, ...(params ? [params]: [])] as const;


export type GetAllQuizQuizzesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAllQuizQuizzesGet>>>
export type GetAllQuizQuizzesGetQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get All Quiz
 */
export const useGetAllQuizQuizzesGet = <TError = AxiosError<HTTPValidationError>>(
  params?: GetAllQuizQuizzesGetParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAllQuizQuizzesGet>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAllQuizQuizzesGetKey(params) : null);
  const swrFn = () => getAllQuizQuizzesGet(params, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Create Quiz Id
 */
export const createQuizIdQuizPost = (
    quizCreate: QuizCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<QuizPublic>> => {
    return axios.default.post(
      `/quiz`,
      quizCreate,options
    );
  }



export const getCreateQuizIdQuizPostMutationFetcher = ( options?: AxiosRequestConfig) => {
  return (_: string, { arg }: { arg: Arguments }): Promise<AxiosResponse<QuizPublic>> => {
    return createQuizIdQuizPost(arg as QuizCreate, options);
  }
}
export const getCreateQuizIdQuizPostMutationKey = () => `/quiz` as const;

export type CreateQuizIdQuizPostMutationResult = NonNullable<Awaited<ReturnType<typeof createQuizIdQuizPost>>>
export type CreateQuizIdQuizPostMutationError = AxiosError<HTTPValidationError>

/**
 * @summary Create Quiz Id
 */
export const useCreateQuizIdQuizPost = <TError = AxiosError<HTTPValidationError>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createQuizIdQuizPost>>, TError, string, Arguments, Awaited<ReturnType<typeof createQuizIdQuizPost>>> & { swrKey?: string }, axios?: AxiosRequestConfig }
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateQuizIdQuizPostMutationKey();
  const swrFn = getCreateQuizIdQuizPostMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Get Quiz Questions
 */
export const getQuizQuestionsQuizQuizIdGet = (
    quizId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<QuizQuestions>> => {
    return axios.default.get(
      `/quiz/${quizId}`,options
    );
  }



export const getGetQuizQuestionsQuizQuizIdGetKey = (quizId: number,) => [`/quiz/${quizId}`] as const;


export type GetQuizQuestionsQuizQuizIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getQuizQuestionsQuizQuizIdGet>>>
export type GetQuizQuestionsQuizQuizIdGetQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get Quiz Questions
 */
export const useGetQuizQuestionsQuizQuizIdGet = <TError = AxiosError<HTTPValidationError>>(
  quizId: number, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getQuizQuestionsQuizQuizIdGet>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(quizId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetQuizQuestionsQuizQuizIdGetKey(quizId) : null);
  const swrFn = () => getQuizQuestionsQuizQuizIdGet(quizId, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Create Quiz Questions Api
 */
export const createQuizQuestionsApiQuizVer2Post = (
    quizQuestionsCreate: QuizQuestionsCreate, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<QuizQuestions>> => {
    return axios.default.post(
      `/quiz_ver2`,
      quizQuestionsCreate,options
    );
  }



export const getCreateQuizQuestionsApiQuizVer2PostMutationFetcher = ( options?: AxiosRequestConfig) => {
  return (_: string, { arg }: { arg: Arguments }): Promise<AxiosResponse<QuizQuestions>> => {
    return createQuizQuestionsApiQuizVer2Post(arg as QuizQuestionsCreate, options);
  }
}
export const getCreateQuizQuestionsApiQuizVer2PostMutationKey = () => `/quiz_ver2` as const;

export type CreateQuizQuestionsApiQuizVer2PostMutationResult = NonNullable<Awaited<ReturnType<typeof createQuizQuestionsApiQuizVer2Post>>>
export type CreateQuizQuestionsApiQuizVer2PostMutationError = AxiosError<HTTPValidationError>

/**
 * @summary Create Quiz Questions Api
 */
export const useCreateQuizQuestionsApiQuizVer2Post = <TError = AxiosError<HTTPValidationError>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof createQuizQuestionsApiQuizVer2Post>>, TError, string, Arguments, Awaited<ReturnType<typeof createQuizQuestionsApiQuizVer2Post>>> & { swrKey?: string }, axios?: AxiosRequestConfig }
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getCreateQuizQuestionsApiQuizVer2PostMutationKey();
  const swrFn = getCreateQuizQuestionsApiQuizVer2PostMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
