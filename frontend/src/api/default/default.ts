/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import useSwr from 'swr'
import type {
  Key,
  SWRConfiguration
} from 'swr'


  
  /**
 * @summary Startup Event 2
 */
export const startupEvent2StartupGet = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    return axios.default.get(
      `/startup`,options
    );
  }



export const getStartupEvent2StartupGetKey = () => [`/startup`] as const;


export type StartupEvent2StartupGetQueryResult = NonNullable<Awaited<ReturnType<typeof startupEvent2StartupGet>>>
export type StartupEvent2StartupGetQueryError = AxiosError<unknown>

/**
 * @summary Startup Event 2
 */
export const useStartupEvent2StartupGet = <TError = AxiosError<unknown>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof startupEvent2StartupGet>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getStartupEvent2StartupGetKey() : null);
  const swrFn = () => startupEvent2StartupGet(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
