/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  QuestionsPublic
} from '.././model'

export const getGetQuestionsApiQuizQuizIdQuestionsGetResponseMock = (overrideResponse: any = {}): QuestionsPublic => ({data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, explaination: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), tilte: faker.word.sample(), time_limit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}),{}]), type: faker.helpers.arrayElement([faker.word.sample(),{}]), updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})), ...overrideResponse})


export const getGetQuestionsApiQuizQuizIdQuestionsGetMockHandler = (overrideResponse?: QuestionsPublic) => {
  return http.get('*/quiz/:quizId/questions', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getGetQuestionsApiQuizQuizIdQuestionsGetResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getQuestionMock = () => [
  getGetQuestionsApiQuizQuizIdQuestionsGetMockHandler()
]
