/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import useSwr from 'swr'
import type {
  Key,
  SWRConfiguration
} from 'swr'
import type {
  HTTPValidationError,
  QuestionsPublic
} from '.././model'


  
  /**
 * @summary Get Questions Api
 */
export const getQuestionsApiQuizQuizIdQuestionsGet = (
    quizId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<QuestionsPublic>> => {
    return axios.default.get(
      `/quiz/${quizId}/questions`,options
    );
  }



export const getGetQuestionsApiQuizQuizIdQuestionsGetKey = (quizId: number,) => [`/quiz/${quizId}/questions`] as const;


export type GetQuestionsApiQuizQuizIdQuestionsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getQuestionsApiQuizQuizIdQuestionsGet>>>
export type GetQuestionsApiQuizQuizIdQuestionsGetQueryError = AxiosError<HTTPValidationError>

/**
 * @summary Get Questions Api
 */
export const useGetQuestionsApiQuizQuizIdQuestionsGet = <TError = AxiosError<HTTPValidationError>>(
  quizId: number, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getQuestionsApiQuizQuizIdQuestionsGet>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(quizId)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetQuestionsApiQuizQuizIdQuestionsGetKey(quizId) : null);
  const swrFn = () => getQuestionsApiQuizQuizIdQuestionsGet(quizId, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
