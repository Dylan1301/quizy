/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  Arguments
} from 'swr'
import useSWRMutation from 'swr/mutation'
import type {
  SWRMutationConfiguration
} from 'swr/mutation'
import type {
  BodyLoginForAccessTokenLoginTokenPost,
  HTTPValidationError,
  TeacherLogin,
  Token
} from '.././model'


  
  /**
 * @summary Login For Access Token
 */
export const loginForAccessTokenLoginTokenPost = (
    bodyLoginForAccessTokenLoginTokenPost: BodyLoginForAccessTokenLoginTokenPost, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Token>> => {const formUrlEncoded = new URLSearchParams();
if(bodyLoginForAccessTokenLoginTokenPost.grant_type !== undefined) {
 formUrlEncoded.append('grant_type', bodyLoginForAccessTokenLoginTokenPost.grant_type)
 }
formUrlEncoded.append('username', bodyLoginForAccessTokenLoginTokenPost.username)
formUrlEncoded.append('password', bodyLoginForAccessTokenLoginTokenPost.password)
if(bodyLoginForAccessTokenLoginTokenPost.scope !== undefined) {
 formUrlEncoded.append('scope', bodyLoginForAccessTokenLoginTokenPost.scope)
 }
if(bodyLoginForAccessTokenLoginTokenPost.client_id !== undefined) {
 formUrlEncoded.append('client_id', bodyLoginForAccessTokenLoginTokenPost.client_id)
 }
if(bodyLoginForAccessTokenLoginTokenPost.client_secret !== undefined) {
 formUrlEncoded.append('client_secret', bodyLoginForAccessTokenLoginTokenPost.client_secret)
 }

    return axios.default.post(
      `/login/token`,
      formUrlEncoded,options
    );
  }



export const getLoginForAccessTokenLoginTokenPostMutationFetcher = ( options?: AxiosRequestConfig) => {
  return (_: string, { arg }: { arg: Arguments }): Promise<AxiosResponse<Token>> => {
    return loginForAccessTokenLoginTokenPost(arg as BodyLoginForAccessTokenLoginTokenPost, options);
  }
}
export const getLoginForAccessTokenLoginTokenPostMutationKey = () => `/login/token` as const;

export type LoginForAccessTokenLoginTokenPostMutationResult = NonNullable<Awaited<ReturnType<typeof loginForAccessTokenLoginTokenPost>>>
export type LoginForAccessTokenLoginTokenPostMutationError = AxiosError<HTTPValidationError>

/**
 * @summary Login For Access Token
 */
export const useLoginForAccessTokenLoginTokenPost = <TError = AxiosError<HTTPValidationError>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof loginForAccessTokenLoginTokenPost>>, TError, string, Arguments, Awaited<ReturnType<typeof loginForAccessTokenLoginTokenPost>>> & { swrKey?: string }, axios?: AxiosRequestConfig }
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getLoginForAccessTokenLoginTokenPostMutationKey();
  const swrFn = getLoginForAccessTokenLoginTokenPostMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Login
 */
export const loginLoginPost = (
    teacherLogin: TeacherLogin, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Token>> => {
    return axios.default.post(
      `/login`,
      teacherLogin,options
    );
  }



export const getLoginLoginPostMutationFetcher = ( options?: AxiosRequestConfig) => {
  return (_: string, { arg }: { arg: Arguments }): Promise<AxiosResponse<Token>> => {
    return loginLoginPost(arg as TeacherLogin, options);
  }
}
export const getLoginLoginPostMutationKey = () => `/login` as const;

export type LoginLoginPostMutationResult = NonNullable<Awaited<ReturnType<typeof loginLoginPost>>>
export type LoginLoginPostMutationError = AxiosError<HTTPValidationError>

/**
 * @summary Login
 */
export const useLoginLoginPost = <TError = AxiosError<HTTPValidationError>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof loginLoginPost>>, TError, string, Arguments, Awaited<ReturnType<typeof loginLoginPost>>> & { swrKey?: string }, axios?: AxiosRequestConfig }
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getLoginLoginPostMutationKey();
  const swrFn = getLoginLoginPostMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
