/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  LoaderQuizData,
  QuestionReponsePublic,
  StudentList,
  StudentPublic
} from '.././model'

export const getGetRoomInfoRoomRoomIdInfoGetResponseMock = (overrideResponse: any = {}): LoaderQuizData => ({created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, description: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), questions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({answers: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({content: faker.word.sample(), created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`,{}]), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}),{}]), undefined]), is_correct: faker.datatype.boolean(), question_id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}),{}]), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`,{}]), undefined]), ...overrideResponse})), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, explaination: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), tilte: faker.word.sample(), time_limit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}),{}]), time_start: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`,{}]), undefined]), type: faker.helpers.arrayElement([faker.word.sample(),{}]), updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})), teacher_id: faker.number.int({min: undefined, max: undefined}), tilte: faker.word.sample(), updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getStartRoomQuizRoomRoomIdStartQuizPostResponseMock = (overrideResponse: any = {}): LoaderQuizData => ({created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, description: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), questions: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({answers: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({content: faker.word.sample(), created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`,{}]), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}),{}]), undefined]), is_correct: faker.datatype.boolean(), question_id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}),{}]), undefined]), updated_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`,{}]), undefined]), ...overrideResponse})), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, explaination: faker.word.sample(), id: faker.number.int({min: undefined, max: undefined}), tilte: faker.word.sample(), time_limit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}),{}]), time_start: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`,{}]), undefined]), type: faker.helpers.arrayElement([faker.word.sample(),{}]), updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})), teacher_id: faker.number.int({min: undefined, max: undefined}), tilte: faker.word.sample(), updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`, ...overrideResponse})

export const getSubmitQuestionResponseRoomRoomIdAnswerPostResponseMock = (overrideResponse: any = {}): QuestionReponsePublic => ({answer_id: faker.number.int({min: undefined, max: undefined}), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), question_id: faker.number.int({min: undefined, max: undefined}), room_id: faker.number.int({min: undefined, max: undefined}), student_id: faker.number.int({min: undefined, max: undefined}), total_time_taken: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getStudentJoinRoomRoomRoomIdJoinPostResponseMock = (overrideResponse: any = {}): StudentPublic => ({id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), room_id: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getGetRoomStudentsRoomRoomIdStudentsGetResponseMock = (overrideResponse: any = {}): StudentList => ({data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created_at: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`,{}]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.word.sample(), room_id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}),{}]), undefined]), ...overrideResponse})), ...overrideResponse})


export const getGetRoomInfoRoomRoomIdInfoGetMockHandler = (overrideResponse?: LoaderQuizData) => {
  return http.get('*/room/:roomId/info', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getGetRoomInfoRoomRoomIdInfoGetResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetRoomQuizRoomRoomIdQuizGetMockHandler = () => {
  return http.get('*/room/:roomId/quiz', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getStartRoomQuizRoomRoomIdStartQuizPostMockHandler = (overrideResponse?: LoaderQuizData) => {
  return http.post('*/room/:roomId/start_quiz', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getStartRoomQuizRoomRoomIdStartQuizPostResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getStartNextQuesRoomRoomIdNextQuestionPostMockHandler = () => {
  return http.post('*/room/:roomId/next_question', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getEndRoomQuizRoomRoomIdEndSessionPostMockHandler = () => {
  return http.post('*/room/:roomId/end_session', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getSubmitQuestionResponseRoomRoomIdAnswerPostMockHandler = (overrideResponse?: QuestionReponsePublic) => {
  return http.post('*/room/:roomId/answer', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getSubmitQuestionResponseRoomRoomIdAnswerPostResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getStudentJoinRoomRoomRoomIdJoinPostMockHandler = (overrideResponse?: StudentPublic) => {
  return http.post('*/room/:roomId/join', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getStudentJoinRoomRoomRoomIdJoinPostResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetRoomStudentsRoomRoomIdStudentsGetMockHandler = (overrideResponse?: StudentList) => {
  return http.get('*/room/:roomId/students', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getGetRoomStudentsRoomRoomIdStudentsGetResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetRoomStatsRoomRoomIdStatsGetMockHandler = () => {
  return http.get('*/room/:roomId/stats', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getSessionMock = () => [
  getGetRoomInfoRoomRoomIdInfoGetMockHandler(),
  getGetRoomQuizRoomRoomIdQuizGetMockHandler(),
  getStartRoomQuizRoomRoomIdStartQuizPostMockHandler(),
  getStartNextQuesRoomRoomIdNextQuestionPostMockHandler(),
  getEndRoomQuizRoomRoomIdEndSessionPostMockHandler(),
  getSubmitQuestionResponseRoomRoomIdAnswerPostMockHandler(),
  getStudentJoinRoomRoomRoomIdJoinPostMockHandler(),
  getGetRoomStudentsRoomRoomIdStudentsGetMockHandler(),
  getGetRoomStatsRoomRoomIdStatsGetMockHandler()
]
