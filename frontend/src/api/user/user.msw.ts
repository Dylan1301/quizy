/**
 * Generated by orval v6.27.1 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  TeacherPublic
} from '.././model'

export const getReadTeacherMeInfoGetResponseMock = (overrideResponse: any = {}): TeacherPublic => ({email: faker.word.sample(), google_id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(),{}]), undefined]), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), ...overrideResponse})

export const getRegisterTeacherSignupPostResponseMock = (overrideResponse: any = {}): TeacherPublic => ({email: faker.word.sample(), google_id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(),{}]), undefined]), id: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), ...overrideResponse})


export const getReadTeacherMeInfoGetMockHandler = (overrideResponse?: TeacherPublic) => {
  return http.get('*/me/info', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getReadTeacherMeInfoGetResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getRegisterTeacherSignupPostMockHandler = (overrideResponse?: TeacherPublic) => {
  return http.post('*/signup', async () => {
    await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse ? overrideResponse : getRegisterTeacherSignupPostResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getChangeTeacherPasswordMePasswordPatchMockHandler = () => {
  return http.patch('*/me/password', async () => {
    await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getUserMock = () => [
  getReadTeacherMeInfoGetMockHandler(),
  getRegisterTeacherSignupPostMockHandler(),
  getChangeTeacherPasswordMePasswordPatchMockHandler()
]
